package main

import (
	"fmt"
	"image"
	"image/draw"
	"image/png"
	"os"
	"time"

	"github.com/kbinani/screenshot"
)

func main() {
	// Récupère le nombre d'écrans disponibles
	numDisplays := screenshot.NumActiveDisplays()

	fmt.Printf("Nombre d'écrans détectés : %d\n", numDisplays)

	// Obtenir la date et l'heure actuelle pour l'horodatage
	currentTime := time.Now()

	// Stocker les captures d'écran dans un tableau
	var images []image.Image

	// Prend des captures d'écran pour chaque écran actif
	for i := 0; i < numDisplays; i++ {
		// Capture l'écran actif
		bounds := screenshot.GetDisplayBounds(i)
		img, err := screenshot.CaptureRect(bounds)
		if err != nil {
			fmt.Printf("Impossible de capturer l'écran %d : %v\n", i, err)
			continue
		}

		images = append(images, img)
	}

	// Si aucune image capturée, on quitte le programme
	if len(images) == 0 {
		fmt.Println("Aucune capture d'écran réalisée.")
		return
	}

	// Détermine les dimensions de l'image combinée
	totalWidth := 0
	maxHeight := 0
	for _, img := range images {
		bounds := img.Bounds()
		totalWidth += bounds.Dx()
		if bounds.Dy() > maxHeight {
			maxHeight = bounds.Dy()
		}
	}

	// Crée une nouvelle image combinée avec les dimensions calculées
	combinedImage := image.NewRGBA(image.Rect(0, 0, totalWidth, maxHeight))

	// Dessine les images capturées sur l'image combinée côte à côte
	offset := 0
	for _, img := range images {
		bounds := img.Bounds()
		draw.Draw(combinedImage, image.Rect(offset, 0, offset+bounds.Dx(), bounds.Dy()), img, image.Point{}, draw.Src)
		offset += bounds.Dx()
	}

	// Crée un nom de fichier unique en utilisant l'horodatage
	fileName := fmt.Sprintf("combined_screenshots_%s.png", currentTime.Format("2006-01-02-15-04-05"))
	file, err := os.Create(fileName)
	if err != nil {
		fmt.Printf("Impossible de créer le fichier %s : %v\n", fileName, err)
		return
	}
	defer file.Close()

	// Enregistre l'image combinée au format PNG
	err = png.Encode(file, combinedImage)
	if err != nil {
		fmt.Printf("Erreur lors de l'enregistrement du fichier %s : %v\n", fileName, err)
		return
	}

	fmt.Printf("Images combinées enregistrées sous : %s\n", fileName)
}
